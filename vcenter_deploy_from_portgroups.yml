---
- name: Deploy one VM per port group from Content Library template
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    # Read required vCenter connection details from environment variables
    vcenter_hostname: "{{ lookup('env', 'VCENTER_SERVER') }}"
    vcenter_username: "{{ lookup('env', 'VCENTER_USERNAME') }}"
    vcenter_password: "{{ lookup('env', 'VCENTER_PASSWORD') }}"
    vcenter_validate_certs: "{{ lookup('env', 'VCENTER_VALIDATE_CERTS') | default('false', true) | bool }}"

    # vSphere placement (provide via env or set here)
    vc_datacenter: "{{ lookup('env', 'VCENTER_DATACENTER') }}"
    vc_cluster: "{{ lookup('env', 'VCENTER_CLUSTER') }}"
    vc_folder: "{{ lookup('env', 'VCENTER_FOLDER') | default('', true) }}"
    vc_datastore: "{{ lookup('env', 'VCENTER_DATASTORE') | default('vsanDatastore', true) }}"

    # Content Library configuration
    content_library_name: "{{ lookup('env', 'VCENTER_CONTENT_LIBRARY') | default('', true) }}"  # optional
    content_library_template: "{{ lookup('env', 'VCENTER_CL_TEMPLATE') | default('IPtest', true) }}"
    # Specify the library item type: 'template' for vmtx template, 'ovf' for OVF item
    content_library_item_type: "{{ lookup('env', 'VCENTER_CL_ITEM_TYPE') | default('template', true) }}"

    # File that contains a list of port group names (one per line)
    portgroup_file: "{{ lookup('env', 'PORTGROUP_FILE') | default('portgroups.txt', true) }}"

    # Optional VM naming prefix
    vm_name_prefix: "{{ lookup('env', 'VM_NAME_PREFIX') | default('iptest-', true) }}"
    # Optional pre-clean: delete existing VMs before deployment
    preclean_delete_vms: "{{ lookup('env', 'PRECLEAN_DELETE_VMS') | default('false', true) | bool }}"
    preclean_pause_seconds: "{{ lookup('env', 'PRECLEAN_PAUSE_SECONDS') | default(120, true) }}"

  pre_tasks:
    - name: Assert required variables are provided
      ansible.builtin.assert:
        that:
          - vcenter_hostname | length > 0
          - vcenter_username | length > 0
          - vcenter_password | length > 0
          - vc_datacenter | length > 0
          - vc_cluster | length > 0
        fail_msg: "Missing required vCenter environment variables. Required: VCENTER_SERVER, VCENTER_USERNAME, VCENTER_PASSWORD, VCENTER_DATACENTER, VCENTER_CLUSTER"

    - name: Ensure community.vmware prerequisites
      ansible.builtin.debug:
        msg: "{{ portgroup_file }}"

    - name: Read port group names from file
      ansible.builtin.set_fact:
        portgroups: "{{ lookup('ansible.builtin.file', portgroup_file).splitlines() | map('trim') | reject('match', '^#') | reject('equalto', '') | list }}"

    - name: Show planned VMs
      ansible.builtin.debug:
        msg: "Will deploy {{ (portgroups | length) }} VMs (one per port group)."

  collections:
    - community.vmware
    - vmware.vmware

  tasks:
    - name: Pre-clean | Delete VMs matching planned names (when enabled)
      when: preclean_delete_vms
      vars:
        vm_name: "{{ vm_name_prefix }}{{ item | regex_replace('[^A-Za-z0-9._-]', '-') }}"
      community.vmware.vmware_guest:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: "{{ vcenter_validate_certs }}"
        datacenter: "{{ vc_datacenter }}"
        name: "{{ vm_name }}"
        state: absent
        force: true
      loop: "{{ portgroups }}"
      loop_control:
        label: "Delete if exists -> {{ vm_name }}"

    - name: Pre-clean | Wait before prompting (when enabled)
      when: preclean_delete_vms
      ansible.builtin.pause:
        seconds: "{{ preclean_pause_seconds }}"

    - name: Pre-clean | Prompt to continue or quit (when enabled)
      when: preclean_delete_vms
      ansible.builtin.pause:
        prompt: "Pre-clean complete. Enter 'c' to continue, anything else to quit"
      register: preclean_prompt

    - name: Pre-clean | Fail if user chose to quit (when enabled)
      when: preclean_delete_vms and (preclean_prompt.user_input | default('') | lower) != 'c'
      ansible.builtin.fail:
        msg: "User aborted after pre-clean."
    - name: Ensure community.vmware prerequisites
      ansible.builtin.debug:
        msg: "Requires: community.vmware collection and pyvmomi installed on control host."

    - name: Loop over portgroups and deploy VMs if absent
      vars:
        portgroup: "{{ item }}"
        vm_name: "{{ vm_name_prefix }}{{ item | regex_replace('[^A-Za-z0-9._-]', '-') }}"
      ansible.builtin.include_tasks: deploy_vm_from_portgroup.yml
      loop: "{{ portgroups }}"
      loop_control:
        label: "{{ item }} => {{ vm_name }}"

  # Usage:
  #   export VCENTER_SERVER=vcsa.example.com
  #   export VCENTER_USERNAME='administrator@vsphere.local'
  #   export VCENTER_PASSWORD='***'
  #   export VCENTER_DATACENTER='DC1'
  #   export VCENTER_CLUSTER='Cluster1'
  #   export VCENTER_CONTENT_LIBRARY='MyLibrary'      # optional if unique across libs
  #   export VCENTER_CL_TEMPLATE='IPtest'             # defaults to IPtest
  #   export VCENTER_DATASTORE='vsanDatastore'        # defaults to vsanDatastore
  #   export PORTGROUP_FILE='ansible/portgroups.txt'  # defaults to ansible/portgroups.txt
  #   ansible-galaxy collection install community.vmware
  #   pip install pyvmomi
  #   ansible-playbook ansible/vcenter_deploy_from_portgroups.yml

